<MudPopoverProvider />

<MudGrid>
    <MudItem xs="12">
        <MudSelect T="Coffee" Label="Coffee"
                   MultiSelection="true"
                   SelectedValues="Selected" SelectedValuesChanged="SelectedChanged"
                   Comparer="Comparer"
                   ToStringFunc="@(x => x?.Name)">
            <MudSelectItem Value="@(new Coffee("cap","Cappuccino"))" />
            <MudSelectItem Value="@(new Coffee("lat","Cafe Latte"))" />
            <MudSelectItem Value="@(new Coffee("esp","Espresso"))" />
            <MudSelectItem Value="@(new Coffee("ire","Irish Coffee"))" />
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        <MudButton id="set-selection-button" OnClick="SetSelection">Set Selection</MudButton>
    </MudItem>
</MudGrid>

@code {
    private static CoffeeComparer Comparer { get; } = new();

    private HashSet<Coffee?> Selected { get; } = new(Comparer);

    private void SelectedChanged(IEnumerable<Coffee?>? newSelected)
    {
        Selected.Clear();
        if (newSelected is not null)
        {
            Selected.UnionWith(newSelected);
        }
    }

    private void SetSelection()
    {
        Selected.Clear();
        Selected.Add(new Coffee("lat", "Selected Cafe Latte"));
        Selected.Add(new Coffee("esp", "Selected Espresso"));
    }

    private class Coffee(string key, string name)
    {
        public string Key { get; } = key;
        public string Name { get; } = name;
    }

    private class CoffeeComparer : IEqualityComparer<Coffee?>
    {
        public bool Equals(Coffee? a, Coffee? b) => a?.Key == b?.Key;

        public int GetHashCode(Coffee? x) => HashCode.Combine(x?.Key);
    }
}
